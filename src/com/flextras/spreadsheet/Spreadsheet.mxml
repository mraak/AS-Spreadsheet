<?xml version="1.0" encoding="utf-8"?>
<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" 
	creationComplete="onCreationComplete()"
	itemRollOver="setLastRollover(event)"
 	editable="true"
  	rowHeight="20"
	sortableColumns="false" 
 	doubleClickEnabled="true"
	xmlns:flexcel="com.flexcel.*"
	implements="com.flextras.spreadsheet.ISpreadsheet">
	
	<mx:Script>
		<![CDATA[
			import com.flextras.calc.Calc;
			import com.flextras.calc.ControlObject;
			import com.flextras.calc.Utils;
			import com.flextras.workbook.CalcSheet;
			import com.flextras.workbook.ColumnHeader;
			import com.flextras.workbook.RowHeader;
			
			import mx.collections.ArrayCollection;
			import mx.controls.TextInput;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			import mx.events.ListEvent;
			
			private var datapr:Array = new Array();
			private var _colCount:int = 10;
			private var _rowCount:int = 10;
			private var _label:String;
			private var tempVal:String;
			private var _itemRolloverInfo:Object;
			private var _useFlexcelItemRenderer:Boolean;
			private var tempEditEvent:DataGridEvent;
			private var _calc:Calc;
			
			private var _expressionTree:Array = new Array();
			public var _ctrlObjects:Object = new Object();
			public var rowHeader:RowHeader;
			public var columnHeader:ColumnHeader;
			public var sheet:CalcSheet;
			public var _renderers:Object = new Object();
			
			public var selectedRenderers:Array;
			
			[Bindable]
			public var dataCol:ArrayCollection;
			
			private function onCreationComplete():void
			{
				init();
			}
			
			public function init():void
			{
				selectedRenderers = new Array();
				
				if(_useFlexcelItemRenderer) this.itemRenderer = new ClassFactory(SpreadsheetItemRenderer);
				
				//build();
			}
			override protected function createChildren():void
			{
				super.createChildren();
				build();
			}
			
			override protected function mouseDoubleClickHandler(event:MouseEvent):void 
			{
				super.mouseDoubleClickHandler(event);
				
				
				// simulate a click (just calling the mouseUpHandler wont work)
				if(_useFlexcelItemRenderer)
				{
					super.mouseDownHandler(event);
					super.mouseUpHandler(event);
				}
			}
				
				
			override protected function mouseUpHandler(event:MouseEvent):void 
			{
				// prevent edits on normal mouse-up
				if(_useFlexcelItemRenderer)
				{
					var saved:Boolean = editable;
					editable = false;
					super.mouseUpHandler(event);
					editable = saved;
				}
				else
				{
					super.mouseUpHandler(event);
				}
			}
			
			
			private function build():void
			{
				var c:int = _colCount;
				var r:int = this.rowCount == -1 ? _rowCount : this.rowCount;
				//r = 0;
				for (var i:int = 0; i < r; i++)
				{
					var rowObject:Object = new Object();
					
					for (var j:int = 0; j < c; j++)
					{
						var prop:String = String(Utils.alphabet[j]).toLowerCase();
						rowObject[prop] = i.toString();

						var co:ControlObject = new ControlObject();
						co.id = prop + i;
						co.exp = "";
						co.ctrl = rowObject;
						co.valueProp = prop;
						co.row = i.toString();
						co.rowIndex = i;	
						co.col = prop;
						co.colIndex = j;	
						co.grid = this;	
						
						_ctrlObjects[co.id] = co;	
					}
					datapr.push(rowObject);
				}
				
				dataCol = new ArrayCollection(datapr);
				
				var cols:Array = new Array();
				
				for (j = 0; j < c; j++)
				{
					var dc:DataGridColumn = new DataGridColumn(Utils.alphabet[j]);
					dc.headerText = Utils.alphabet[j];
					dc.dataField = String(Utils.alphabet[j]).toLowerCase();
					dc.itemEditor = new ClassFactory(SpreadsheetItemEditor);
					dc.editorDataField = "actualValue" ;
					cols.push(dc);
				}
				
				this.columns = cols;
				this.allowMultipleSelection = true;
				this.addEventListener(DataGridEvent.ITEM_FOCUS_IN, onItemFocusIn);
				//this.addEventListener(MouseEvent.DOUBLE_CLICK, onDblClick);
				//this.addEventListener(DataGridEvent.ITEM_FOCUS_OUT, onItemFocusOut);
				//this.addEventListener(DataGridEvent.ITEM_EDIT_BEGIN, onEditBegin);
				//this.addEventListener(DataGridEvent.ITEM_EDIT_BEGINNING, onEditBegin);
				//this.addEventListener(DataGridEvent.ITEM_EDIT_END, onEditEnd);
				
				this.dataProvider = dataCol;
				var isdfs:int = 0;
				
				
			}
			
			
			private function onItemFocusIn(evt:DataGridEvent):void
			{
				var col:String = String(Utils.alphabet[evt.columnIndex]).toLowerCase();
				var oid:String = col + evt.rowIndex;
				
				var o:ControlObject = _ctrlObjects[oid];
				var t:String = TextInput(itemEditorInstance).text;
				var ce:String = _ctrlObjects[oid].exp;
				var cv:String = _ctrlObjects[oid].ctrl[col];
				tempVal = cv;
				
				if (_ctrlObjects[oid].exp != null && _ctrlObjects[oid].exp != "")
				{
					TextInput(evt.itemRenderer).text = _ctrlObjects[oid].exp;
				}
				//trace("tempVal " + tempVal);
				
				var i:int=0;
			}
			
	
			public function itemRendererRollOut(ir:SpreadsheetItemRenderer, evt:MouseEvent):void
			{
				
			}
					
			public function itemRendererRollOver(ir:SpreadsheetItemRenderer, evt:MouseEvent):void
			{
				if(itemRolloverInfo) itemRolloverInfo.itemRenderer = ir;
				
			}
			
			public function itemRendererClick(ir:SpreadsheetItemRenderer, evt:MouseEvent):void
			{
				//Alert.show(ir.bg.height.toString());
				if(!evt.ctrlKey && !evt.shiftKey)
				{
					for each(var sir:SpreadsheetItemRenderer in selectedRenderers)
					{
						sir.selected = false;
					}	
					selectedRenderers = new Array();
				}
				
				selectedRenderers.push(ir);
				ir.selected = true;
			}
			
			public function itemRendererDoubleClick(ir:SpreadsheetItemRenderer, evt:MouseEvent):void
			{
				
			}
			
			
			public function insertRowAt(index:uint):void
			{
				// b1=t1+g1
				// a0=t1+g1
				// insert at the end
				// add empty row obj at 1
				// b2=t2+g2 // move target, move ops, for same row and after, starting with the last
				// b1="" // remove, for same row
				// ao=t2+g2 // move ops, for columns before				
				
				var rowObject:Object = new Object();
				
				for (var j:int = 0; j < colCount; j++)
				{
					var prop:String = String(Utils.alphabet[j]).toLowerCase();
					rowObject[prop] = "";

					var co:ControlObject = new ControlObject();
					co.id = prop + dataCol.length;
					co.exp = "";
					co.ctrl = rowObject;
					co.valueProp = prop;
					co.row = dataCol.length.toString();
					co.rowIndex = dataCol.length;	
					co.col = prop;
					co.colIndex = j;	
					co.grid = this;			
					
					_ctrlObjects[co.id] = co;	
				}
				
				dataCol.addItemAt(rowObject, dataCol.length);
				this.validateNow();
				//sheet.columnHeader.setHeaderAndGridWidth(itemRolloverInfo.column, getColumnWidthAt(itemRolloverInfo.column) - 1);
				
				updateExpressionsUponRowOrColumnChange("rowIndex", index, 0, 1, [null,null,index,null]);

			}
			
			
			public function insertColumnAt(index:uint):void
			{
				var lcu:int = getLastUsedColumnIndex();
				var lc:int = colCount;
				var newCol:String = String(Utils.alphabet[colCount]).toLowerCase();
				
				// setup data provider and ControlObject collection
				var i:int = 0
				for each(var ro:Object in dataCol)
				{
					ro[newCol] = "";
					dataCol.itemUpdated(ro);
					
					var co:ControlObject = new ControlObject();
					co.id = newCol + i;
					co.exp = "";
					co.ctrl = ro;
					co.valueProp = newCol;
					co.row = i.toString();
					co.rowIndex = i;	
					co.col = newCol;
					co.colIndex = colCount;	
					co.grid = this;			
					_ctrlObjects[co.id] = co;
						
					i++;
				}
				this.dataProvider = dataCol;
				
				var dc:DataGridColumn = new DataGridColumn(newCol.toUpperCase());
				dc.headerText = newCol.toUpperCase();
				dc.dataField = newCol;
				dc.itemEditor = new ClassFactory(SpreadsheetItemEditor);
				dc.editorDataField = "actualValue" ;
				
				var cols:Array = this.columns;
				cols.push(dc);
				
				this.columns = cols;
				this.width += dc.width;
				this.validateNow();
				colCount++;
				
				updateExpressionsUponRowOrColumnChange("colIndex", index, 1, 0, [index]);
							
			}
			
			// indexProp is either 'colIndex' or 'rowIndex'
			// index is an index where the insertion happened
			private function updateExpressionsUponRowOrColumnChange(indexProp:String, index:int, dx:int, dy:int, excludeRule:Array = null):void
			{
				
				var oldCopy:Array = new Array();
				var newCopy:Array = new Array();
				
				for each(var co:ControlObject in expressionTree)
				{
					var nco:ControlObject = new ControlObject();
					var oco:ControlObject = new ControlObject();
					
					if(co[indexProp] >= index)
					{
						nco.id = Utils.moveFieldId(co.id, dx, dy);
					}
					else
					{
						nco.id = co.id;
					}
					
					nco.exp = (co.exp) ? Utils.moveExpression(co, dx, dy, null, excludeRule) : co.ctrl[co.valueProp];
					
					oco.id = co.id;
					
					newCopy.push(nco);
					oldCopy.push(oco);
				}

				for each(co in oldCopy)
				{
					_calc.assignControlExpression(_ctrlObjects[co.id], "");
				}
				
				for each(co in newCopy)
				{
					_calc.assignControlExpression(_ctrlObjects[co.id], co.exp);
				}
				
			}
			
			public function getLastUsedColumnIndex():int
			{
				var lc:int = 0;
				for each(var co:ControlObject in expressionTree)
				{
					if (co.colIndex > lc)
					{
						lc = co.colIndex;
					}
				}
				return lc;
			}
			
			public function getColumnExpressions(index:int):Array
			{
				var ra:Array = new Array;
				for each(var co:ControlObject in expressionTree)
				{
					if(co.colIndex == index)
					{
						ra.push(co);
					}
				}
				return ra;
			}
		
			public function getLastUsedRowIndex():int
			{
				var lr:int = 0;
				for each(var co:ControlObject in expressionTree)
				{
					if (co.rowIndex > lr)
					{
						lr = co.rowIndex;
					}
				}
				return lr;
			}
			
			public function getRowExpressions(index:int):Array
			{
				var ra:Array = new Array;
				for each(var co:ControlObject in expressionTree)
				{
					if(co.rowIndex == index)
					{
						ra.push(co);
					}
				}
				return ra;
			}
			
			public function setRowExpressions(index:int, expressions:Array):void
			{
				clearRowContent(index);
				for each(var co:ControlObject in expressions)
				{
					_calc.assignControlExpression(_ctrlObjects[(co.col+index)], co.exp);
				}
			}
			
			public function deleteRow(index:int):void
			{
				clearRowContent(index);
				updateExpressionsUponRowOrColumnChange("rowIndex", index, 0, -1, [null,null,index,null]);
			}
			
			public function clearRowContent(index:int):void
			{
				var cos:Array = getRowExpressions(index);
				for each(var co:ControlObject in cos)
				{
					_calc.assignControlExpression(co, "");
				}
				
			}
			
			public function deleteColumn(index:int):void
			{
				clearColumnContent(index);
				updateExpressionsUponRowOrColumnChange("colIndex", index, -1, 0, [index]);
			}
			
			public function clearColumnContent(index:int):void
			{
				var cos:Array = getColumnExpressions(index);
				for each(var co:ControlObject in cos)
				{
					_calc.assignControlExpression(co, "");
				}
				
			}	
			
			private function setLastRollover(evt:ListEvent):void
			{
				_itemRolloverInfo = new Object();
				_itemRolloverInfo.rowIndex = evt.rowIndex;
				_itemRolloverInfo.columnIndex = evt.columnIndex;
				
				var col:String = String(Utils.alphabet[evt.columnIndex]).toLowerCase();
				_itemRolloverInfo.column = col;
				_itemRolloverInfo.itemId = col + evt.rowIndex;
				_itemRolloverInfo.co = _ctrlObjects[_itemRolloverInfo.itemId];
				
				
				var sdf:int = 0;
			}
			
			public function getRowHeightAt(index:int):Number
			{
				var o:* = this.indexToItemRenderer(index);
				//o.height = 100;
				//o.measuredHeight = 100;
				var a:Array = this.rowInfo;
				return o.height;	
			}
			
			public function setRowHeightAt(index:int, height:Number):void
			{
				var o:* = this.indexToItemRenderer(index);
				o.height = height;
				o.validateNow();
				var sdf:int = 0;
			}
			
			public function assignExpression(cellId:String, expression:String):void
			{
				
			}
			
			public function getColumnWidthAt(index:int):Number
			{
				return 30;
				
			}
					
			public function setColumnWidthAt(index:int, width:Number):void
			{

				this.columns[index].width = width;
			}
			
			public function updateExpressions():void
			{
				
			}
			
			public function get expressionListXML():XML
			{
				var s:String = "<sheet type=\"grid\" id=\"" + this.id + "\" columnCount=\"" + colCount + "\" rowCount=\"" + rowCount + "\">"
				s += "<expressions>";
				
				for each(var grco:ControlObject in expressionTree)
				{
					var exp:String = (grco.exp) ? grco.exp : grco.ctrl[grco.valueProp];
					s += "<e oid=\""+ grco.id + "\" exp=\"" + exp + "\"/>";
				}
				
				s += "</expressions>";
				s += "</sheet>";
				
				return new XML(s);
			}
			
			override public function set rowCount(count:int):void
			{
				//super.rowCount = count;
				_rowCount = count;
			}
			
			public function set colCount(count:int):void
			{
				this.columnCount = count;
				_colCount = count;
			}
			
			public function get colCount():int
			{
				return this.columnCount;	
			}
			
			public function get itemRolloverInfo():Object
			{
				return _itemRolloverInfo;
			}
			
			public function set label(val:String):void
			{
				_label = val;
			}
			
			public function get label():String
			{
				return _label;	
			}
			
			public function get useFlexcelItemRenderer():Boolean
			{
				return _useFlexcelItemRenderer;
			}
			
			public function set useFlexcelItemRenderer(value:Boolean):void
			{
				_useFlexcelItemRenderer = value;
			}
			
			public function set ctrlObjects(value:Object):void
			{
				_ctrlObjects = value;
			}
			
			public function get ctrlObjects():Object
			{
				return _ctrlObjects;
			}
			
			public function set calc(value:Calc):void
			{
				_calc = value;
				_calc.addSpreadsheet(this);
			}
			
			public function get calc():Calc
			{
				return _calc;
			}
			
			public function get gridDataProvider():ArrayCollection
			{
				return dataCol;
			}
			
			public function get expressionTree():Array
			{
				return _expressionTree;
			}
			
			public function get renderers():Object
			{
				return _renderers;
			}
			
			public function set expressions(value:ArrayCollection):void
			{
				
			}
			
			public function get expressions():ArrayCollection
			{
				return null;
			}
			
			
			
		]]>
	</mx:Script>
</mx:DataGrid>
