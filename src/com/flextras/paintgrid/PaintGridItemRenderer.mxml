<?xml version = "1.0" encoding = "utf-8"?>
<mx:UIComponent xmlns:fx = "http://ns.adobe.com/mxml/2009"
				xmlns:s = "library://ns.adobe.com/flex/spark"
				xmlns:mx = "library://ns.adobe.com/flex/halo"
				implements = "mx.controls.listClasses.IListItemRenderer"
				rollOver = "rollOverHandler(event)"
				rollOut = "rollOutHandler(event)"
				mouseDown = "clickHandler(event)"
				currentState = "normal">
	<mx:states>
		<s:State name = "normal" />

		<s:State name = "over" />

		<s:State name = "selected" />

		<s:State name = "disabled" />
	</mx:states>

	<fx:Declarations>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.flextras.paintgrid.*;
			
			import flash.text.engine.FontWeight;
			import flash.text.engine.Kerning;
			
			import flashx.textLayout.formats.TextAlign;
			import flashx.textLayout.formats.TextDecoration;
			
			import mx.controls.listClasses.IListItemRenderer;
			import mx.core.UIComponent;
			import mx.core.UITextField;
			import mx.core.mx_internal;
			import mx.utils.ObjectProxy;
			
			use namespace mx_internal;
			
			protected var _dataGrid : PaintGrid;
			
			[Bindable]
			public function get dataGrid () : PaintGrid
			{
				return _dataGrid;
			}
			
			public function set dataGrid (value : PaintGrid) : void
			{
				if (_dataGrid === value)
					return;
				
				_dataGrid = value;
			}
			
			protected var _data : Object;
			
			protected var dataChanged : Boolean;
			
			[Bindable]
			public function get data () : Object
			{
				return _data;
			}
			
			public function set data (value : Object) : void
			{
				if (_data === value)
					return;
				
				_data = value;
				dataChanged = true;
				
				invalidateProperties();
			}
			
			protected var _cell : CellProperties;
			
			[Bindable]
			public function get cell () : CellProperties
			{
				return _cell;
			}
			
			public function set cell (value : CellProperties) : void
			{
				if (!value || value === _cell)
					return;
				
				if (cell)
				{
					cell.removeEventListener(CellEvent.STYLES_CHANGED, stylesChangedHandler);
					cell.removeEventListener(CellEvent.ROLLOVER_STYLES_CHANGED, rollOverStylesChangedHandler);
					cell.removeEventListener(CellEvent.SELECTED_STYLES_CHANGED, selectedStylesChangedHandler);
					cell.removeEventListener(CellEvent.DISABLED_STYLES_CHANGED, disabledStylesChangedHandler);
					
					resetStyles();
				}
				
				_cell = value;
				
				if (cell)
				{
					cell.addEventListener(CellEvent.STYLES_CHANGED, stylesChangedHandler);
					cell.addEventListener(CellEvent.ROLLOVER_STYLES_CHANGED, rollOverStylesChangedHandler);
					cell.addEventListener(CellEvent.SELECTED_STYLES_CHANGED, selectedStylesChangedHandler);
					cell.addEventListener(CellEvent.DISABLED_STYLES_CHANGED, disabledStylesChangedHandler);
					
					applyStyles(cell.styles);
				}
			}
			
			protected var background : Shape;
			
			protected var textField : UITextField;
			
			override protected function createChildren () : void
			{
				super.createChildren();
				
				if (!background)
				{
					background = new Shape();
					
					addChild(background);
				}
				
				if (!textField)
				{
					textField = new UITextField();
					
					addChild(textField);
				}
			}
			
			// TODO!!! Display actual data
			override protected function commitProperties () : void
			{
				super.commitProperties();
				
				if (dataChanged)
				{
					textField.text = "a";
					
					dataChanged = false;
				}
			}
			
			override protected function measure () : void
			{
				super.measure();
				
				var w : Number = textField.measuredWidth > background.width ? textField.measuredWidth : background.width;
				var h : Number = textField.measuredHeight > background.height ? textField.measuredHeight : background.height;
				
				measuredMinWidth = measuredWidth = w;
				measuredMinHeight = measuredHeight = h;
			}
			
			override protected function updateDisplayList (w : Number, h : Number) : void
			{
				super.updateDisplayList(w, h);
				
				if (dataGrid && !dataGrid.isItemSelected(data) && currentState == "selected")
					currentState = "normal";
				
				if (foregroundChanged)
				{
					textField.textColor = _foregroundColor;
					textField.alpha = _foregroundAlpha || 1;
					
					foregroundChanged = false;
				}
				
				if (fontStylesChanged)
				{
					textField.antiAliasType = _antiAliasType || AntiAliasType.NORMAL;
					textField.gridFitType = _gridFitType || GridFitType.NONE;
					textField.sharpness = _sharpness;
					textField.thickness = _thickness;
					
					var tf : TextFormat = new TextFormat(_family, _size || 10);
					tf.align = _align || TextFormatAlign.LEFT;
					tf.bold = _weight == "bold";
					tf.indent = _indent;
					tf.italic = _style == "italic";
					tf.kerning = _kerning;
					tf.letterSpacing = _spacing;
					tf.underline = _decoration == "underline";
					
					textField.setTextFormat(tf);
					
					fontStylesChanged = false;
				}
				
				if (backgroundChanged)
				{
					background.graphics.clear();
					background.graphics.beginFill(_backgroundColor, _backgroundAlpha || 1);
					background.graphics.drawRect(0, 0, w, h);
					background.graphics.endFill();
					
					backgroundChanged = false;
				}
				
				background.width = w;
				background.height = h;
				
				textField.setActualSize(w, h);
			}
			
			override protected function stateChanged (oldState : String, newState : String, recursive : Boolean) : void
			{
				super.stateChanged(oldState, newState, recursive);
				
				if (!cell)
					return;
				
				switch (newState)
				{
					case "normal":
						applyStyles(cell.styles);
						break;
					
					case "over":
						applyStyles(cell.rollOverStyles);
						break;
					
					case "selected":
						applyStyles(cell.selectedStyles);
						break;
					
					case "disabled":
						applyStyles(cell.disabledStyles);
						break;
				}
			}
			
			// TODO !!!
			override public function styleChanged (styleProp : String) : void
			{
				super.styleChanged(styleProp);
			}
			
			protected function stylesChangedHandler (e : CellEvent) : void
			{
				if (currentState == "normal")
					processStyles(e);
			}
			
			protected function rollOverStylesChangedHandler (e : CellEvent) : void
			{
				if (currentState == "over")
					processStyles(e);
			}
			
			protected function selectedStylesChangedHandler (e : CellEvent) : void
			{
				if (currentState == "selected")
					processStyles(e);
			}
			
			protected function disabledStylesChangedHandler (e : CellEvent) : void
			{
				if (currentState == "disabled")
					processStyles(e);
			}
			
			protected function processStyles (e : CellEvent) : void
			{
				switch (e.property)
				{
					case "color":
						foregroundColor = e.newValue as uint;
						
						break;
					
					case "alpha":
						foregroundAlpha = e.newValue as Number;
						
						break;
					
					case "backgroundColor":
						backgroundColor = e.newValue as uint;
						
						break;
					
					case "backgroundAlpha":
						backgroundAlpha = e.newValue as Number;
						
						break;
					
					case "antiAliasType":
						antiAliasType = e.newValue as String;
						
						break;
					
					case "family":
						family = e.newValue as String;
						
						break;
					
					case "gridFitType":
						gridFitType = e.newValue as String;
						
						break;
					
					case "sharpness":
						sharpness = e.newValue as Number;
						
						break;
					
					case "size":
						size = e.newValue as uint;
						
						break;
					
					case "style":
						style = e.newValue as String;
						
						break;
					
					case "thickness":
						thickness = e.newValue as Number;
						
						break;
					
					case "weight":
						weight = e.newValue as String;
						
						break;
					
					case "kerning":
						kerning = e.newValue as Boolean;
						
						break;
					
					case "spacing":
						spacing = e.newValue as int;
						
						break;
					
					case "align":
						align = e.newValue as String;
						
						break;
					
					case "decoration":
						decoration = e.newValue as String;
						
						break;
					
					case "indent":
						indent = e.newValue as int;
						
						break;
				}
			}
			
			protected function applyStyles (on : ObjectProxy) : void
			{
				if (!on)
					return;
				
				foregroundColor = on.color;
				foregroundAlpha = on.alpha;
				
				backgroundColor = on.backgroundColor;
				backgroundAlpha = on.backgroundAlpha;
				
				antiAliasType = on.antiAliasType;
				family = on.family;
				gridFitType = on.gridFitType;
				sharpness = on.sharpness;
				size = on.size;
				style = on.style;
				thickness = on.thickness;
				weight = on.weight;
				kerning = on.kerning;
				spacing = on.spacing;
				align = on.align;
				decoration = on.decoration;
				indent = on.indent;
			}
			
			protected function resetStyles () : void
			{
				foregroundColor = 0;
				foregroundAlpha = 1;
				
				backgroundColor = 0xFFFFFF;
				backgroundAlpha = 1;
				
				antiAliasType = AntiAliasType.NORMAL;
				family = getStyle("fontFamily");
				gridFitType = GridFitType.NONE;
				sharpness = 0;
				size = getStyle("fontSize");
				style = FontStyle.REGULAR;
				thickness = 0;
				weight = FontWeight.NORMAL;
				kerning = Kerning.OFF;
				spacing = 0;
				align = TextAlign.LEFT;
				decoration = TextDecoration.NONE;
				indent = 0;
			}
			
			/**
			 * Event handlers
			 */
			
			protected function rollOverHandler (e : MouseEvent) : void
			{
				if (currentState != "selected")
					currentState = "over";
			}
			
			protected function rollOutHandler (e : MouseEvent) : void
			{
				if (currentState != "selected")
					currentState = "normal";
			}
			
			protected function clickHandler (e : MouseEvent) : void
			{
				if (currentState != "selected")
					currentState = "selected";
				else
					currentState = "over";
				
				PaintGrid(owner).selectedCellProperties = cell;
			}
			
			/**
			 * Foreground styles
			 */
			
			protected var foregroundChanged : Boolean;
			
			protected var _foregroundColor : uint = 0xFFFFFF;
			
			protected function set foregroundColor (value : uint) : void
			{
				if (_foregroundColor == value)
					return;
				
				_foregroundColor = value;
				foregroundChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _foregroundAlpha : Number = 1;
			
			protected function set foregroundAlpha (value : Number) : void
			{
				if (_foregroundAlpha == value)
					return;
				
				_foregroundAlpha = value;
				foregroundChanged = true;
				
				invalidateDisplayList();
			}
			
			/**
			 * Background styles
			 */
			
			protected var backgroundChanged : Boolean;
			
			protected var _backgroundColor : uint = 0xFFFFFF;
			
			protected function set backgroundColor (value : uint) : void
			{
				if (_backgroundColor == value)
					return;
				
				_backgroundColor = value;
				backgroundChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _backgroundAlpha : Number = 1;
			
			protected function set backgroundAlpha (value : Number) : void
			{
				if (_backgroundAlpha == value)
					return;
				
				_backgroundAlpha = value;
				backgroundChanged = true;
				
				invalidateDisplayList();
			}
			
			/**
			 * Font styles
			 */
			
			protected var fontStylesChanged : Boolean;
			
			protected var _align : String;
			
			protected function set align (value : String) : void
			{
				if (_align == value)
					return;
				
				_align = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _antiAliasType : String;
			
			protected function set antiAliasType (value : String) : void
			{
				if (_antiAliasType == value)
					return;
				
				_antiAliasType = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _decoration : String;
			
			protected function set decoration (value : String) : void
			{
				if (_decoration == value)
					return;
				
				_decoration = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _family : String;
			
			protected function set family (value : String) : void
			{
				if (_family == value)
					return;
				
				_family = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _gridFitType : String;
			
			protected function set gridFitType (value : String) : void
			{
				if (_gridFitType == value)
					return;
				
				_gridFitType = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _indent : int;
			
			protected function set indent (value : int) : void
			{
				if (_indent == value)
					return;
				
				_indent = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _kerning : Boolean;
			
			protected function set kerning (value : Boolean) : void
			{
				if (_kerning == value)
					return;
				
				_kerning = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _sharpness : Number;
			
			protected function set sharpness (value : Number) : void
			{
				if (_sharpness == value)
					return;
				
				_sharpness = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _size : uint;
			
			protected function set size (value : uint) : void
			{
				if (_size == value)
					return;
				
				_size = value;
				fontStylesChanged = true;
				
				invalidateSize();
				invalidateDisplayList();
			}
			
			protected var _spacing : int;
			
			protected function set spacing (value : int) : void
			{
				if (_spacing == value)
					return;
				
				_spacing = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _style : String;
			
			protected function set style (value : String) : void
			{
				if (_style == value)
					return;
				
				_style = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _thickness : Number;
			
			protected function set thickness (value : Number) : void
			{
				if (_thickness == value)
					return;
				
				_thickness = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
			
			protected var _weight : String;
			
			protected function set weight (value : String) : void
			{
				if (_weight == value)
					return;
				
				_weight = value;
				fontStylesChanged = true;
				
				invalidateDisplayList();
			}
		]]>
	</fx:Script>
</mx:UIComponent>
