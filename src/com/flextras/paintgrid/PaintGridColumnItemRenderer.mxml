<?xml version = "1.0" encoding = "utf-8"?>
<mx:UIComponent xmlns:fx = "http://ns.adobe.com/mxml/2009"
				xmlns:s = "library://ns.adobe.com/flex/spark"
				xmlns:mx = "library://ns.adobe.com/flex/halo"
				implements = "mx.controls.listClasses.IListItemRenderer, mx.controls.listClasses.IDropInListItemRenderer"
				rollOver = "rollOverHandler(event)"
				rollOut = "rollOutHandler(event)"
				mouseDown = "clickHandler(event)"
				currentState = "normal">
	<mx:states>
		<s:State name = "normal" />

		<s:State name = "over" />

		<s:State name = "selected" />

		<s:State name = "disabled" />
	</mx:states>

	<fx:Declarations>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.flextras.paintgrid.*;
			
			import mx.controls.dataGridClasses.DataGridListData;
			import mx.controls.listClasses.BaseListData;
			import mx.controls.listClasses.IDropInListItemRenderer;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.core.UIComponent;
			import mx.core.UITextField;
			import mx.core.mx_internal;
			
			use namespace mx_internal;
			
			protected var styles : CellStyles = new CellStyles(this as PaintGridColumnItemRenderer);
			
			protected var _dataGrid : PaintGrid;
			
			[Bindable]
			public function get dataGrid () : PaintGrid
			{
				return _dataGrid;
			}
			
			public function set dataGrid (value : PaintGrid) : void
			{
				if (_dataGrid === value)
					return;
				
				_dataGrid = value;
			}
			
			protected var _data : Object;
			
			protected var dataChanged : Boolean;
			
			[Bindable]
			public function get data () : Object
			{
				return _data;
			}
			
			public function set data (value : Object) : void
			{
				if (_data === value)
					return;
				
				_data = value;
				dataChanged = true;
				
				invalidateProperties();
			}
			
			protected var _listData : DataGridListData;
			
			[Bindable]
			public function get listData () : BaseListData
			{
				return _listData;
			}
			
			public function set listData (value : BaseListData) : void
			{
				if (_listData === value)
					return;
				
				_listData = value as DataGridListData;
			}
			
			protected var _cell : CellProperties;
			
			[Bindable]
			public function get cell () : CellProperties
			{
				return _cell;
			}
			
			public function set cell (value : CellProperties) : void
			{
				if (!value /*  || value === _cell */)
					return;
				
				updateCellState = false;
				currentState = null;
				updateCellState = true;
				
				styles.styleChanged("styleName");
				
				if (cell)
				{
					cell.removeEventListener(CellEvent.STYLES_CHANGED, styles.stylesChangedHandler);
					cell.removeEventListener(CellEvent.ROLLOVER_STYLES_CHANGED, styles.rollOverStylesChangedHandler);
					cell.removeEventListener(CellEvent.SELECTED_STYLES_CHANGED, styles.selectedStylesChangedHandler);
					cell.removeEventListener(CellEvent.DISABLED_STYLES_CHANGED, styles.disabledStylesChangedHandler);
					styles.resetStyles();
				}
				
				_cell = value;
				
				invalidateDisplayList();
				
				if (cell)
				{
					cell.addEventListener(CellEvent.STYLES_CHANGED, styles.stylesChangedHandler);
					cell.addEventListener(CellEvent.ROLLOVER_STYLES_CHANGED, styles.rollOverStylesChangedHandler);
					cell.addEventListener(CellEvent.SELECTED_STYLES_CHANGED, styles.selectedStylesChangedHandler);
					cell.addEventListener(CellEvent.DISABLED_STYLES_CHANGED, styles.disabledStylesChangedHandler);
					
					updateCellState = false;
					currentState = cell.state;
					updateCellState = true;
					
					styles.fontStylesChanged = true;
					
					invalidateSize();
					invalidateDisplayList();
					
					initStyles(cell.state);
				}
			}
			
			protected var updateCellState : Boolean;
			
			override public function set currentState (value : String) : void
			{
				super.currentState = value;
				
				if (cell && updateCellState)
					cell.state = value;
			}
			
			protected var background : Shape;
			
			[Bindable]
			protected var textField : UITextField;
			
			override protected function createChildren () : void
			{
				super.createChildren();
				
				if (!background)
				{
					background = new Shape();
					
					addChild(background);
				}
				
				if (!textField)
				{
					textField = new UITextField();
					textField.styleName = this;
					
					addChild(textField);
				}
			}
			
			override protected function commitProperties () : void
			{
				super.commitProperties();
				
				if (dataChanged)
				{
					textField.text = _listData.label;
					
					dataChanged = false;
				}
			}
			
			override protected function measure () : void
			{
				super.measure();
				
				var w : Number = textField.measuredWidth; // > background.width ? textField.measuredWidth : background.width;
				var h : Number = textField.measuredHeight; // > background.height ? textField.measuredHeight : background.height;
				
				measuredMinWidth = measuredWidth = w;
				measuredMinHeight = measuredHeight = h;
			}
			
			override protected function updateDisplayList (w : Number, h : Number) : void
			{
				super.updateDisplayList(w, h);
				
				if (dataGrid && dataGrid.selectedCellProperties != cell && currentState == "selected")
					currentState = "normal";
				
				if (styles.foregroundChanged)
				{
					textField.textColor = styles._foregroundColor;
					textField.alpha = styles._foregroundAlpha;
					
					styles.foregroundChanged = false;
				}
				
				if (styles.fontStylesChanged)
				{
					if (styles._antiAliasType)
						textField.antiAliasType = styles._antiAliasType;
					
					if (styles._gridFitType)
						textField.gridFitType = styles._gridFitType;
					
					textField.sharpness = styles._sharpness;
					textField.thickness = styles._thickness;
					
					var tf : TextFormat = new TextFormat();
					
					if (styles._family)
						tf.font = styles._family;
					
					tf.size = cell.styles.size ? cell.styles.size : styles.defaultSize;
					
					if (styles._align)
						tf.align = styles._align;
					
					if (styles._weight)
						tf.bold = styles._weight == "bold";
					
					tf.indent = styles._indent;
					
					if (styles._style)
						tf.italic = styles._style == "italic";
					
					tf.kerning = styles._kerning;
					tf.letterSpacing = styles._spacing;
					
					if (styles._decoration)
						tf.underline = styles._decoration == "underline";
					
					textField.setTextFormat(tf);
					
					styles.fontStylesChanged = false;
					
					callLater(invalidateSize);
					validateNow();
				}
				
				if (styles.backgroundChanged)
				{
					background.graphics.clear();
					background.graphics.beginFill(styles._backgroundColor, styles._backgroundAlpha);
					background.graphics.drawRect(0, 0, w, h);
					background.graphics.endFill();
					
					styles.backgroundChanged = false;
				}
				
				background.width = w;
				background.height = h;
				
				textField.setActualSize(w, h);
			}
			
			override protected function stateChanged (oldState : String, newState : String, recursive : Boolean) : void
			{
				super.stateChanged(oldState, newState, recursive);
				
				if (!cell)
					return;
				
				initStyles(newState);
			}
			
			protected function initStyles (state : String) : void
			{
				switch (state)
				{
					case null:
					case "normal":
						styles.applyStyles(cell.styles);
						break;
					
					case "over":
						styles.applyStyles(cell.rollOverStyles, false);
						break;
					
					case "selected":
						styles.applyStyles(cell.selectedStyles, false);
						break;
					
					case "disabled":
						styles.applyStyles(cell.disabledStyles, false);
						break;
				}
			}
			
			// TODO !!!
			override public function styleChanged (styleProp : String) : void
			{
				super.styleChanged(styleProp);
				
				styles.styleChanged(styleProp);
			}
			
			/**
			 * Event handlers
			 */
			
			protected function rollOverHandler (e : MouseEvent) : void
			{
				if (currentState != "selected")
					currentState = "over";
			}
			
			protected function rollOutHandler (e : MouseEvent) : void
			{
				if (currentState != "selected")
					currentState = "normal";
			}
			
			protected function clickHandler (e : MouseEvent) : void
			{
				if (currentState != "selected")
					currentState = "selected";
				
				if (!dataGrid)
					return;
				
				if (dataGrid.selectedCellProperties)
					dataGrid.selectedCellProperties.owner.invalidateDisplayList();
				
				dataGrid.selectedCellProperties = cell;
			}
		]]>
	</fx:Script>
</mx:UIComponent>
